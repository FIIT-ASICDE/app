{
  "as": {
    "prefix": "as",
    "body": [
      "assert ${1:false}",
      "\treport \"${2:The expression is false}\";$0"
    ],
    "description": "assert default severity"
  },
  "asw": {
    "prefix": "asw",
    "body": [
      "assert ${1:false}",
      "\treport \"${2:The expression is false}\"",
      "\tseverity warning;$0"
    ],
    "description": "assert warning"
  },
  "ase": {
    "prefix": "ase",
    "body": [
      "assert ${1:false}",
      "\treport \"${2:The expression is false}\"",
      "\tseverity error;$0"
    ],
    "description": "assert error"
  },
  "asf": {
    "prefix": "asf",
    "body": [
      "assert ${1:false}",
      "\treport \"${2:The expression is false}\"",
      "\tseverity failure;$0"
    ],
    "description": "assert failure"
  },
  "arch": {
    "prefix": "arch",
    "body": [
      "architecture ${1:rtl} of ${2:ent} is",
      "",
      "\tsignal $0",
      "",
      "begin",
      "",
      "end architecture;"
    ],
    "description": "architecture"
  },
  "c": {
    "prefix": "c",
    "body": [
      "constant ${1:name} : ${2:integer} := ${3:0};$0"
    ],
    "description": "constant"
  },
  "ca": {
    "prefix": "ca",
    "body": [
      "case ${1:sig} is",
      "",
      "\twhen ${2:IDLE} =>",
      "\t\t$0",
      "",
      "\twhen others =>",
      "",
      "end case;"
    ],
    "description": "case"
  },
  "el": {
    "prefix": "el",
    "body": [
      "else",
      "\t$0"
    ],
    "description": "else"
  },
  "eli": {
    "prefix": "eli",
    "body": [
      "elsif ${1:true} then",
      "\t$0"
    ],
    "description": "elsif"
  },
  "ent": {
    "prefix": "ent",
    "body": [
      "entity ${1:ent} is",
      "\tport (",
      "\t\t${2:clk : in std_logic;",
      "\t\trst : in std_logic;}",
      "\t\t${0:sig}",
      "\t);",
      "end ${1:ent};"
    ],
    "description": "entity"
  },
  "entarch": {
    "prefix": "entarch",
    "body": [
      "entity ${1:ent} is",
      "\tport (",
      "\t\t${3:clk : in std_logic;",
      "\t\trst : in std_logic;}",
      "\t\t${0:sig}",
      "\t);",
      "end ${1:ent};",
      "",
      "architecture ${2:rtl} of ${1:ent} is",
      "",
      "",
      "",
      "begin",
      "",
      "",
      "",
      "end architecture;"
    ],
    "description": "entity architecture"
  },
  "fa": {
    "prefix": "fa",
    "body": [
      "falling_edge(${1:clk})$0"
    ],
    "description": "falling_edge()"
  },
  "fo": {
    "prefix": "fo",
    "body": [
      "for ${1:i} in ${2:0} to ${3:7} loop",
      "\t$0",
      "end loop;"
    ],
    "description": "for loop"
  },
  "fun": {
    "prefix": "fun",
    "body": [
      "function ${1:name}(${2:params}) return ${3:boolean} is",
      "begin",
      "\t$0",
      "end function;"
    ],
    "description": "function"
  },
  "gen": {
    "prefix": "gen",
    "body": [
      "${1/(.*)/${1:/upcase}/}_GEN : for ${2:i} in ${3:0} to ${4:7} generate",
      "\t$0",
      "end generate;"
    ],
    "description": "for generate"
  },
  "ift": {
    "prefix": "ift",
    "body": [
      "if ${1:true} then",
      "\t$0",
      "end if;"
    ],
    "description": "if else"
  },
  "ifte": {
    "prefix": "ifte",
    "body": [
      "if ${1:true} then",
      "\t$2",
      "else",
      "\t$0",
      "end if;"
    ],
    "description": "if else"
  },
  "incr": {
    "prefix": "incr",
    "body": [
      "${1:counter} <= ${1:counter} + 1;"
    ],
    "description": "s <= s + 1;"
  },
  "decr": {
    "prefix": "decr",
    "body": [
      "${1:counter} <= ${1:counter} - 1;"
    ],
    "description": "s <= s - 1;"
  },
  "int": {
    "prefix": "int",
    "body": [
      "integer"
    ],
    "description": "integer"
  },
  "intd": {
    "prefix": "intd",
    "body": [
      "integer range ${1:255} downto ${2:0}"
    ],
    "description": "integer range x downto y"
  },
  "intt": {
    "prefix": "intt",
    "body": [
      "integer range ${1:0} to ${2:255}"
    ],
    "description": "integer range x to y"
  },
  "o0": {
    "prefix": "o0",
    "body": [
      "(others => '0')"
    ],
    "description": "(others => '0')"
  },
  "o1": {
    "prefix": "o1",
    "body": [
      "(others => '1')"
    ],
    "description": "(others => '1')"
  },
  "ox": {
    "prefix": "ox",
    "body": [
      "(others => 'X')"
    ],
    "description": "(others => 'X')"
  },
  "pack": {
    "prefix": "pack",
    "body": [
      "package ${1:pkg} is",
      "\t$0",
      "end package;${2:",
      "",
      "package body ${1:pck} is",
      "",
      "end package body;}"
    ],
    "description": "package"
  },
  "pro": {
    "prefix": "pro",
    "body": [
      "${1/(.*)/${1:/upcase}/}_PROC : process${2:(${3:sensitivity_list})}",
      "begin",
      "\t$0",
      "end process;"
    ],
    "description": "process"
  },
  "proar": {
    "prefix": "proar",
    "body": [
      "${1/(.*)/${1:/upcase}/}_PROC : process(clk, rst)",
      "begin",
      "\tif rst = '1' then",
      "\t\t$0",
      "",
      "\telsif rising_edge(clk) then",
      "",
      "",
      "\tend if;",
      "end process;"
    ],
    "description": "asynch process with reset"
  },
  "pros": {
    "prefix": "pros",
    "body": [
      "${1/(.*)/${1:/upcase}/}_PROC : process(clk)",
      "begin",
      "\tif rising_edge(clk) then",
      "\t\t$0",
      "\tend if;",
      "end process;"
    ],
    "description": "synch process"
  },
  "profsm": {
    "prefix": "profsm",
    "body": [
      "FSM_PROC : process(clk)",
      "begin",
      "\tif rising_edge(clk) then",
      "\t\tif rst = '1' then",
      "\t\t\t${1:state} <= ${2:IDLE};",
      "",
      "\t\telse",
      "\t\t\tcase ${1:state} is",
      "",
      "\t\t\t\twhen ${2:IDLE} =>",
      "\t\t\t\t\t$0",
      "",
      "\t\t\tend case;",
      "",
      "\t\tend if;",
      "\tend if;",
      "end process;"
    ],
    "description": "FSM process"
  },
  "prosr": {
    "prefix": "prosr",
    "body": [
      "${1/(.*)/${1:/upcase}/}_PROC : process(clk)",
      "begin",
      "\tif rising_edge(clk) then",
      "\t\tif rst = '1' then",
      "\t\t\t$0",
      "\t\t\t",
      "\t\telse",
      "\t\t\t",
      "\t\t\t",
      "\t\tend if;",
      "\tend if;",
      "end process;"
    ],
    "description": "synch process with reset"
  },
  "proc": {
    "prefix": "proc",
    "body": [
      "procedure ${1:name}(${2:params}) is",
      "begin",
      "\t$0",
      "end procedure;"
    ],
    "description": "procedure"
  },
  "rep": {
    "prefix": "rep",
    "body": [
      "report \"${1:This is a message}\";$0"
    ],
    "description": "report a message"
  },
  "ri": {
    "prefix": "ri",
    "body": [
      "rising_edge(${1:clk})$0"
    ],
    "description": "rising_edge()"
  },
  "s": {
    "prefix": "s",
    "body": [
      "signal ${1:name} : ${0:std_logic};"
    ],
    "description": "signal"
  },
  "sh": {
    "prefix": "sh",
    "body": [
      "shared variable ${1:name} : ${2:ptype};$0"
    ],
    "description": "shared variable"
  },
  "si": {
    "prefix": "si",
    "body": [
      "signed"
    ],
    "description": "signed"
  },
  "sid": {
    "prefix": "sid",
    "body": [
      "signed(${1:7} downto ${2:0})$0"
    ],
    "description": "signed(x downto y)"
  },
  "sit": {
    "prefix": "sit",
    "body": [
      "signed(${1:0} to ${2:7})$0"
    ],
    "description": "signed(x to y)"
  },
  "sir": {
    "prefix": "sir",
    "body": [
      "signed(${1:sig}'range)$0"
    ],
    "description": "signed(sig'range)"
  },
  "sl": {
    "prefix": "sl",
    "body": [
      "std_logic"
    ],
    "description": "std_logic"
  },
  "slv": {
    "prefix": "slv",
    "body": [
      "std_logic_vector"
    ],
    "description": "std_logic_vector"
  },
  "slvd": {
    "prefix": "slvd",
    "body": [
      "std_logic_vector(${1:7} downto ${2:0})$0"
    ],
    "description": "std_logic_vector(x downto y)"
  },
  "slvt": {
    "prefix": "slvt",
    "body": [
      "std_logic_vector(${1:0} to ${2:7})$0"
    ],
    "description": "std_logic_vector(x downto y)"
  },
  "slvr": {
    "prefix": "slvr",
    "body": [
      "std_logic_vector(${1:sig}'range)$0"
    ],
    "description": "std_logic_vector(sig'range)"
  },
  "toi": {
    "prefix": "toi",
    "body": [
      "to_integer(${1:sig})$0"
    ],
    "description": "to_integer(sig)"
  },
  "tos": {
    "prefix": "tos",
    "body": [
      "to_signed(${1:-1}, ${2:sig}'length)$0"
    ],
    "description": "to_signed(-1, sig'length)"
  },
  "tou": {
    "prefix": "tou",
    "body": [
      "to_unsigned(${0}, ${2:sig}'length)$0"
    ],
    "description": "to_unsigned(0, sig'length)"
  },
  "typarr": {
    "prefix": "typarr",
    "body": [
      "type ${1:arr}_type is array (${2:0} to ${3: 255}) of ${4:std_logic_vector(${6:7} downto ${5:0})};"
    ],
    "description": "array type"
  },
  "typfsm": {
    "prefix": "typfsm",
    "body": [
      "type ${1:state}_type is (${2:IDLE}, $0);",
      "signal ${1:state} : ${1:state}_type;"
    ],
    "description": "FSM type/signal"
  },
  "typrec": {
    "prefix": "typrec",
    "body": [
      "type ${1:rec}_type is record",
      "\t$0",
      "end record;"
    ],
    "description": "record type"
  },
  "un": {
    "prefix": "un",
    "body": [
      "unsigned"
    ],
    "description": "unsigned"
  },
  "und": {
    "prefix": "und",
    "body": [
      "unsigned(${1:7} downto ${2:0})$0"
    ],
    "description": "unsigned(x downto y)"
  },
  "unt": {
    "prefix": "unt",
    "body": [
      "unsigned(${1:0} to ${2:7})$0"
    ],
    "description": "unsigned(x to y)"
  },
  "unr": {
    "prefix": "unr",
    "body": [
      "unsigned(${1:sig}'range)$0"
    ],
    "description": "unsigned(sig'range)"
  },
  "v": {
    "prefix": "v",
    "body": [
      "variable ${1:name} : ${2:std_logic};$0"
    ],
    "description": "variable"
  },
  "vhdl": {
    "prefix": "vhdl",
    "body": [
      "library ieee;",
      "use ieee.std_logic_1164.all;",
      "use ieee.numeric_std.all;",
      "",
      "entity ${1:ent} is",
      "\tport (${3:",
      "\t\tclk : in std_logic;",
      "\t\trst : in std_logic;}",
      "\t\t${0:sig}",
      "\t);",
      "end ${1:ent};",
      "",
      "architecture ${2:rtl} of ${1:ent} is",
      "",
      "begin",
      "",
      "end architecture;"
    ],
    "description": "VHDL template"
  },
  "vhdltb": {
    "prefix": "vhdltb",
    "body": [
      "library ieee;",
      "use ieee.std_logic_1164.all;",
      "use ieee.numeric_std.all;",
      "",
      "use std.textio.all;",
      "use std.env.finish;",
      "",
      "entity ${1:dutent}_tb is",
      "end ${1:dutent}_tb;",
      "",
      "architecture sim of ${1:dutent}_tb is",
      "",
      "\tconstant clk_hz : integer := ${2:100e6};",
      "\tconstant clk_period : time := 1 sec / clk_hz;",
      "",
      "\tsignal clk : std_logic := '1';",
      "\tsignal rst : std_logic := '1';",
      "",
      "begin",
      "",
      "\tclk <= not clk after clk_period / 2;",
      "",
      "\tDUT : entity work.${1:dutent}(rtl)",
      "\tport map (",
      "\t\tclk => clk,",
      "\t\trst => rst,",
      "\t\t$0",
      "\t);",
      "",
      "\tSEQUENCER_PROC : process",
      "\tbegin",
      "\t\twait for clk_period * 2;",
      "",
      "\t\trst <= '0';",
      "",
      "\t\twait for clk_period * 10;",
      "\t\tassert false",
      "\t\t\treport \"Replace this with your test cases\"",
      "\t\t\tseverity failure;",
      "",
      "\t\tfinish;",
      "\tend process;",
      "",
      "end architecture;"
    ],
    "description": "VHDL testbench template"
  },
  "vunittb": {
    "prefix": "vunittb",
    "body": [
      "library ieee;",
      "use ieee.std_logic_1164.all;",
      "use ieee.numeric_std.all;",
      "",
      "library vunit_lib;",
      "context vunit_lib.vunit_context;",
      "",
      "entity ${1:dutent}_tb is",
      "\tgeneric (runner_cfg : string);",
      "end ${1:dutent}_tb;",
      "",
      "architecture sim of ${1:dutent}_tb is",
      "",
      "\tconstant tb_logger : logger_t := get_logger(\"tb\");",
      "",
      "\tconstant clk_hz : integer := 100e6;",
      "\tconstant clk_period : time := 1 sec / clk_hz;",
      "",
      "\tsignal clk : std_logic := '1';",
      "\tsignal rst : std_logic := '1';",
      "",
      "begin",
      "",
      "\t-- DUT : entity work.${1:dutent}(rtl)",
      "\t-- port map (",
      "\t--   clk => clk,",
      "\t--   rst => rst,",
      "",
      "\t-- );$0",
      "",
      "\ttest_runner_watchdog(runner, 10 us);",
      "",
      "\t-- show_all(default_logger, display_handler);",
      "\t-- show_all(com_logger, display_handler);",
      "\tshow_all(tb_logger, display_handler);",
      "",
      "\tclk <= not clk after clk_period / 2;",
      "",
      "\tSEQUENCER_PROC : process",
      "\tbegin",
      "",
      "\t\ttest_runner_setup(runner, runner_cfg);",
      "",
      "\t\twait for clk_period * 2;",
      "\t\trst <= '0';",
      "",
      "\t\tif run(\"test_case_1\") then",
      "",
      "\t\t\terror(tb_logger, \"Implement your test case here\");",
      "",
      "\t\t-- elsif run(\"test_case_2\") then",
      "",
      "\t\tend if;",
      "",
      "\t\twait for clk_period * 3;",
      "\t\tinfo(tb_logger, \"Test sequence completed\");",
      "\t\ttest_runner_cleanup(runner);",
      "\tend process;",
      "",
      "end architecture;"
    ],
    "description": "VUnit testbench template"
  },
  "w": {
    "prefix": "w",
    "body": [
      "when ${1:STATE} =>",
      "\t$0"
    ],
    "description": "when STATE =>"
  },
  "wh": {
    "prefix": "wh",
    "body": [
      "while ${2:true} loop",
      "\t$0",
      "end loop;"
    ],
    "description": "while"
  },
  "wf": {
    "prefix": "wf",
    "body": [
      "wait for ${1:clk_period * ${2:1}};$0"
    ],
    "description": "wait for"
  },
  "wo": {
    "prefix": "wo",
    "body": [
      "wait on ${1:clk};$0"
    ],
    "description": "wait on"
  },
  "wu": {
    "prefix": "wu",
    "body": [
      "wait until ${1:rising_edge(clk)};"
    ],
    "description": "wait until"
  }
}