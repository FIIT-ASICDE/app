model Organization {
  id                   String                 @id @default(uuid()) @db.Uuid
  name                 String?
  users                OrganizationUser[]
  userOrganizationRepo RepoUserOrganization[]
  description          String
  picture              String

  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  OrganizationUserInvitation OrganizationUserInvitation[]
}

model OrganizationUser {
  userId         String           @db.Uuid
  user           User             @relation(fields: [userId], references: [id])
  organizationId String           @db.Uuid
  organization   Organization     @relation(fields: [organizationId], references: [id])
  role           OrganizationRole @default(MEMBER)

  @@unique([userId, organizationId]) // Ensures a user can have one role per organization-repo pair
}

model OrganizationUserInvitation {
  userId         String           @db.Uuid
  user           User             @relation(fields: [userId], references: [id])
  organizationId String           @db.Uuid
  organization   Organization     @relation(fields: [organizationId], references: [id])
  isPending      Boolean          @default(true)
  role           OrganizationRole @default(MEMBER)

  @@unique([userId, organizationId]) // Ensures a user can have one invitations per organization-user pair
}

enum OrganizationRole {
  MEMBER
  ADMIN
}
