// Data needed by AuthJS to authenticate user, the platform specific data
// are in UserMetadata one to one relationship
model User {
  id 			String @id @default(uuid()) @db.Uuid
  name          String?
  email         String @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Only for admin
  password String?

  metadata 		UserMetadata?

  @@index([name(ops: raw("gin_trgm_ops"))], map: "user_name_trgm_idx", type: Gin)
}

// To have more data about the user, we need to gather it after OAuth signup
// (Github, Google, Microsoft, ...). The User has a one to one relationship
// with UserMetadata, in order to filter out non-onboarded users by inner join
model UserMetadata {
  id 		String @id @default(uuid()) @db.Uuid
  firstName String
  surname   String
  bio     	String?
  role    	UserRole @default(USER)

  organizations              OrganizationUser[]
  userOrganizationRepo       RepoUserOrganization[]
  OrganizationUserInvitation OrganizationUserInvitation[]

  user   User 	@relation(fields: [userId], references: [id])
  userId String @db.Uuid @unique
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
